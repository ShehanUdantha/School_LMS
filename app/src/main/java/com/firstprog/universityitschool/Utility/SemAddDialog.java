package com.firstprog.universityitschool.Utility;

import android.app.Dialog;
import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;

import com.firstprog.universityitschool.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

public class SemAddDialog {

    private Context context;
    private Dialog semDialog;
    private TextView itemTitles;
    private EditText Semester;
    Button submit;
    private LoadingDialog loading_Dialog, loading_Dialog2;
    private DatabaseReference databaseReference, newDatabaseReference, pushedPostRef;
    private FirebaseAuth firebaseAuth;


    public SemAddDialog(Context context) {
        this.context = context;
    }

    //display editText view when clicking add button
    public void showDialog(String itemTitle) {
        semDialog = new Dialog(context);
        semDialog.setContentView(R.layout.activity_one_item_add_dialog);
        semDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        semDialog.setCanceledOnTouchOutside(true);

        itemTitles = semDialog.findViewById(R.id.itemTitle);
        itemTitles.setText(itemTitle);

        Semester = semDialog.findViewById(R.id.addItem);

        semDialog.create();
        semDialog.show();
    }

    //return button id to semesterFragment
    public Button submit() {
        return submit = semDialog.findViewById(R.id.btnSubmitItem);
    }

    //upload newly added semester to the firebase
    public void uploadToFirebase(String batchID) {
        //check internet connection
        if (!CheckNetwork.isConnected(context)) {
            CheckNetwork.showNetworkDialog(context);
        } else {

            loading_Dialog = new LoadingDialog(context);
            String getSemester = Semester.getText().toString();

            if (valid(getSemester)) {
                loading_Dialog.showDialog("Please Wait..");

                databaseReference = FirebaseDatabase.getInstance("https://itschool-auth-default-rtdb.firebaseio.com").getReference("batch");

                databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                        for (DataSnapshot ds : snapshot.getChildren()) {
                            String allBatchID = ds.child("batchID").getValue().toString();

                            if (allBatchID.equals(batchID)) {
                                newDatabaseReference = ds.child("batch_Sem").getRef();
                                // Generate a reference to a new location and add some data using push()
                                pushedPostRef = newDatabaseReference.push();
                                // Get the unique ID generated by a push()
                                String postId = pushedPostRef.getKey();

                                newDatabaseReference.child(postId).child("semMainChildID").setValue(postId);
                                newDatabaseReference.child(postId).child("semID").setValue(getSemester);
                                newDatabaseReference.child(postId).child("current").setValue(false);

                                Semester.setText(" ");

                                semDialog.dismiss();
                                loading_Dialog.HideDialog();

                                Toast.makeText(context, "Added Successfully", Toast.LENGTH_SHORT).show();

                            }
                        }
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError error) {
                        throw error.toException();
                    }
                });
                semDialog.dismiss();
                loading_Dialog.HideDialog();
            }
        }
    }

    //display editText view with semester details when clicking edit button
    public void showDialogWithDetails(String batch, String itemTitle) {
        //check internet connection
        if (!CheckNetwork.isConnected(context)) {
            CheckNetwork.showNetworkDialog(context);
        } else {


            semDialog = new Dialog(context);
            semDialog.setContentView(R.layout.activity_one_item_add_dialog);
            semDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
            semDialog.setCanceledOnTouchOutside(true);

            itemTitles = semDialog.findViewById(R.id.itemTitle);
            itemTitles.setText(itemTitle);

            //set batch number in preview
            Semester = semDialog.findViewById(R.id.addItem);
            Semester.setText(batch);

            semDialog.create();
            semDialog.show();
        }
    }

    //update firebase semester data when clicking edit button
    public void updateFirebaseDetails(String getBatchPreNumber, String pVal) {
        //check internet connection
        if (!CheckNetwork.isConnected(context)) {
            CheckNetwork.showNetworkDialog(context);
        } else {

            loading_Dialog2 = new LoadingDialog(context);

            String newSemester = Semester.getText().toString();

            firebaseAuth = FirebaseAuth.getInstance();
            databaseReference = FirebaseDatabase.getInstance("https://itschool-auth-default-rtdb.firebaseio.com").getReference("batch").child(getBatchPreNumber).child("batch_Sem");

            if (valid(newSemester)) {
                loading_Dialog2.showDialog("Please Wait..");

                databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                        for (DataSnapshot ds : snapshot.getChildren()) {
                            String allPreVAL = ds.child("semMainChildID").getValue().toString();

                            if (allPreVAL.equals(pVal)) {
                                ds.child("semID").getRef().setValue(newSemester).addOnCompleteListener(new OnCompleteListener<Void>() {
                                    @Override
                                    public void onComplete(@NonNull Task<Void> task) {

                                        semDialog.dismiss();
                                        loading_Dialog2.HideDialog();
                                        Toast.makeText(context, "Update Successful", Toast.LENGTH_SHORT).show();
                                    }
                                });
                            }
                        }
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError error) {
                        throw error.toException();
                    }
                });

                loading_Dialog2.HideDialog();
            }
        }

    }

    //update, which semester is currently showing to the students in particular batch
    public void updateSelectedSemester(String getBatchPreNumber, String pVal, boolean checked){
        //check internet connection
        if (!CheckNetwork.isConnected(context)) {
            CheckNetwork.showNetworkDialog(context);
        } else {
            firebaseAuth = FirebaseAuth.getInstance();
            databaseReference = FirebaseDatabase.getInstance("https://itschool-auth-default-rtdb.firebaseio.com").getReference("batch").child(getBatchPreNumber).child("batch_Sem");

            databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    for (DataSnapshot ds : snapshot.getChildren()) {
                        String allPreVAL = ds.child("semMainChildID").getValue().toString();

                        if(checked){

                            if (allPreVAL.equals(pVal)) {
                                ds.child("current").getRef().setValue(true).addOnCompleteListener(new OnCompleteListener<Void>() {
                                    @Override
                                    public void onComplete(@NonNull Task<Void> task) {
                                        Toast.makeText(context, "Update Successful", Toast.LENGTH_SHORT).show();
                                    }
                                });
                            } else {
                                ds.child("current").getRef().setValue(false).addOnCompleteListener(new OnCompleteListener<Void>() {
                                    @Override
                                    public void onComplete(@NonNull Task<Void> task) {
                                    }
                                });
                            }
                        } else {
                            if (allPreVAL.equals(pVal)) {
                                ds.child("current").getRef().setValue(false).addOnCompleteListener(new OnCompleteListener<Void>() {
                                    @Override
                                    public void onComplete(@NonNull Task<Void> task) {
                                        Toast.makeText(context, "Update Successful", Toast.LENGTH_SHORT).show();
                                    }
                                });
                            }
                        }
                    }
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {
                    throw error.toException();
                }
            });

        }

    }

    private boolean valid(String semester) {
        if (semester.isEmpty()) {
            Toast.makeText(context, "Semester Cannot be Empty!", Toast.LENGTH_SHORT).show();
            return false;
        }

        return true;
    }
}
