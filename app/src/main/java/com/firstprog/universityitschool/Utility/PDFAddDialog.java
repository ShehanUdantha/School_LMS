package com.firstprog.universityitschool.Utility;

import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;

import com.firstprog.universityitschool.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.OnProgressListener;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.UUID;


public class PDFAddDialog {

    private Context context;
    private Dialog PDFAddDialog;
    private TextView pdfScreenTitle, uploadCardName;
    LinearLayout uploadArea_;
    Button submit;
    private StorageReference storageReference, ref;
    private DatabaseReference databaseReference, newDatabaseReference, pushedPostRef;


    public PDFAddDialog(Context context) {
        this.context = context;
    }

    //display editText view when clicking add button
    public void showDialog() {
        PDFAddDialog = new Dialog(context);
        PDFAddDialog.setContentView(R.layout.pdf_and_video_add_dialog);
        PDFAddDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        PDFAddDialog.setCanceledOnTouchOutside(true);

        uploadCardName = PDFAddDialog.findViewById(R.id.uploadCardName);
        uploadCardName.setText("Add New PDF");
        pdfScreenTitle = PDFAddDialog.findViewById(R.id.uploadScreenTitle);
        pdfScreenTitle.setText("Tap to Upload PDF");

        PDFAddDialog.create();
        PDFAddDialog.show();
    }


    //return button id to week pdf Fragment
    public Button submit() {
        return submit = PDFAddDialog.findViewById(R.id.btnSubmitFile);
    }

    public LinearLayout uploadAreaView(){
        return uploadArea_ = PDFAddDialog.findViewById(R.id.uploadArea);
    }

    public void updateFileName(String name){
        pdfScreenTitle.setText(name);
    }

    public void uploadPDFtoFirebase(String fileName, Uri filePath, String weekID, String batchNumber, String semesterNumber, String subjectNumber, String weekPreKey) {
        //check internet connection
        if (!CheckNetwork.isConnected(context)) {
            CheckNetwork.showNetworkDialog(context);
        } else {

            if(filePath != null) {

                databaseReference = FirebaseDatabase.getInstance("https://itschool-auth-default-rtdb.firebaseio.com").getReference("batch").child(batchNumber).child("batch_Sem").child(semesterNumber).child("semester_subject").child(subjectNumber).child("weeks");
                storageReference = FirebaseStorage.getInstance().getReference();

                databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                        for (DataSnapshot ds : snapshot.getChildren()) {
                            String allSemID = ds.child("weekID").getValue().toString();

                            if (allSemID.equals(weekID)) {
                                newDatabaseReference = ds.child("week_pdf").getRef();
                                // Generate a reference to a new location and add some data using push()
                                pushedPostRef = newDatabaseReference.push();
                                // Get the unique ID generated by a push()
                                String postId = pushedPostRef.getKey();

                                newDatabaseReference.child(postId).child("pdfsMainChildID").setValue(postId);
                                newDatabaseReference.child(postId).child("pdfName").setValue(fileName);
                                String date = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date());
                                newDatabaseReference.child(postId).child("pdfUploadDate").setValue(date);

                                getPDFUrl(weekID, weekPreKey, postId, filePath);
                            }
                        }
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError error) {
                        throw error.toException();
                    }

                });

            } else {
                Toast.makeText(context, "Selection Should not be Empty", Toast.LENGTH_SHORT).show();
            }
        }
    }

    //selected pdf upload to the firebase and get firebase url and store it week pdf path according to user id
    public void getPDFUrl(String weekID, String weekPreKey, String postID, Uri fillPath) {

        final ProgressDialog progressDialog = new ProgressDialog(context, R.style.LoadingDialogStyle);
        progressDialog.setTitle("Uploading...");
        progressDialog.setCancelable(false);
        progressDialog.show();

        ref = storageReference.child("materials").child(weekID).child("pdf/" + UUID.randomUUID().toString() + "." + "pdf");
        ref.putFile(fillPath).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                    @Override
                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {

                        //get url of uploaded pdf
                        taskSnapshot.getStorage().getDownloadUrl().addOnCompleteListener(new OnCompleteListener<Uri>() {
                            @Override
                            public void onComplete(@NonNull Task<Uri> task) {
                                databaseReference.child(weekPreKey).child("week_pdf").child(postID).child("pdfUrl").setValue(task.getResult().toString()).addOnCompleteListener(new OnCompleteListener<Void>() {
                                    @Override
                                    public void onComplete(@NonNull Task<Void> task) {
                                        PDFAddDialog.dismiss();
                                        progressDialog.dismiss();
                                        Toast.makeText(context, "Added Successfully", Toast.LENGTH_SHORT).show();
                                    }
                                });
                            }
                        });
                    }
                }).addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {
                    @Override
                    public void onProgress(@NonNull UploadTask.TaskSnapshot snapshot) {
                        double progress = (100.0 * snapshot.getBytesTransferred())/ snapshot.getTotalByteCount();
                        progressDialog.setMessage("Upload: "+(int)progress+"%");
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                    }
                });
    }


}
